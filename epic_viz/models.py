# Auto-generated by Django db inspect
from __future__ import unicode_literals
from django.db import models
import django.db.models.options as options

import pandas as pd

options.DEFAULT_NAMES = options.DEFAULT_NAMES + ('in_db',)


class Artifact(models.Model):
    artifact_id = models.AutoField(primary_key=True,
                                   db_column='artifact_id')
    foreign_id = models.IntegerField()
    artifact_type = models.ForeignKey('ArtifactType', models.DO_NOTHING)

    class Meta:
        in_db = 'prov'
        managed = False
        db_table = 'artifact'


class ArtifactType(models.Model):
    artifact_type_id = models.AutoField(primary_key=True,
                                        db_column='artifact_type_id')
    artifact_type_name = models.CharField(max_length=255,
                                          db_column='artifact_type_name')

    class Meta:
        in_db = 'prov'
        managed = False
        db_table = 'artifact_type'


class ArtifactTag(models.Model):
    artifact = models.ForeignKey('Artifact',
                                 models.DO_NOTHING,
                                 db_column='artifact_id')
    tag = models.ForeignKey('Tag',
                            models.DO_NOTHING,
                            db_column='tag')

    class Meta:
        in_db = 'prov'
        managed = False
        db_table = 'artifact_tag'
        unique_together = (('artifact', 'tag'),)


class Tag(models.Model):
    tag_id = models.AutoField(primary_key=True,
                              db_column='tag_id')
    tag_name = models.CharField(max_length=255)
    tag_name_short = models.CharField(max_length=127)
    tag_type = models.ForeignKey('TagType', models.DO_NOTHING)

    class Meta:
        in_db = 'prov'
        managed = False
        db_table = 'tag'


class TagType(models.Model):
    tag_type_id = models.AutoField(primary_key=True,
                                   db_column='tag_type_id')
    tag_type_name = models.CharField(max_length=255)

    class Meta:
        in_db = 'prov'
        managed = False
        db_table = 'tag_type'


class ModelOutput(object):

    def __init__(self,
                 meid,
                 me_name,
                 me_type,
                 model_type,
                 mvid,
                 mv_status_id,
                 date_inserted,
                 best_start,
                 description,
                 status):
        self.meid = meid
        self.me_name = me_name
        self.me_type = me_type
        self.model_type = model_type
        self.mvid = mvid
        self.mv_status_id = mv_status_id
        self.date_inserted = date_inserted
        self.best_start = best_start
        self.description = description
        self.status = status

        try:
            self.meid = int(self.meid)
        except TypeError:
            pass
        try:
            self.mvid = int(self.mvid)
        except TypeError:
            pass
        try:
            self.mv_status_id = int(self.mv_status_id)
        except TypeError:
            pass
